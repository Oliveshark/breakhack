# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "dev", "feature/*" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl, mingw-w64-gcc]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cmake_args: '-DSDLMIXER_VENDORED=ON'
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_args: '-GNinja'
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_args: '-GNinja'
          - os: ubuntu-latest
            c_compiler: mingw-w64-gcc
            cpp_compiler: mingw-w64-g++
            cmake_args: >
              -DSDL2MIXER_VENDORED=ON
              -DSDL2TTF_VENDORED=ON
              -DCMAKE_TOOLCHAIN_FILE=build_deps/toolchains/mingw-w64-i686.cmake
              -GNinja
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
            cmake_args: '-DSDLMIXER_VENDORED=ON -GNinja'
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            cmake_args: '-DSDLMIXER_VENDORED=ON -GNinja'
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            c_compiler: mingw-w64-gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: mingw-w64-gcc

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}

    - name: Set up Linux dependencies
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo apt-get update
        sudo apt-get -y install \
          cmake \
          mingw-w64 \
          libflac-dev \
          libfluidsynth-dev \
          libgme-dev \
          libmpg123-dev \
          libopusfile-dev \
          libvorbis-dev \
          libxmp-dev \
          libwavpack-dev \
          ninja-build \
          pkg-config \
          libopusfile-dev \
          libxmp-dev \
          fluidsynth

    - name: Set up Macos dependencies
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install \
          libtool \
          ninja \
          pkg-config \
          flac \
          fluidsynth \
          game-music-emu \
          libvorbis \
          libxmp \
          mpg123 \
          opusfile \
          wavpack

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        ${{ matrix.cmake_args }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
